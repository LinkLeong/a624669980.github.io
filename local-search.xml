<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>golang操作ElasticSearch</title>
    <link href="/posts/4e4947d4.html"/>
    <url>/posts/4e4947d4.html</url>
    
    <content type="html"><![CDATA[<h2 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h2><ol><li><p>安装es到本地</p><pre><code class="hljs shell">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.3.0</code></pre></li><li><p>创建网络</p><pre><code class="hljs shell">docker network create esnet</code></pre></li></ol><ol start="3"><li><p>启动容器</p><pre><code class="hljs sh">docker run --name es  -p 9200:9200 -p 9300:9300  --network esnet -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> bdaab402b220</code></pre></li></ol><ol start="4"><li><p>安装ElisticHD</p><pre><code class="hljs sh">docker run -p 9800:9800 -d --link es:demo  --network esnet -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span>  containerize/elastichd</code></pre><p><img src="https://i.loli.net/2021/04/18/xsqWQa5hSG621Kz.png"></p></li></ol><h2 id="下载依赖库"><a href="#下载依赖库" class="headerlink" title="下载依赖库"></a>下载依赖库</h2><pre><code class="hljs go"><span class="hljs-keyword">go</span> get github.com/olivere/elastic/v7</code></pre><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;github.com/olivere/elastic&quot;</span>)<span class="hljs-keyword">var</span> client *elastic.Client<span class="hljs-keyword">var</span> host = <span class="hljs-string">&quot;http://192.168.43.176:9200&quot;</span><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;FirstName <span class="hljs-keyword">string</span>   <span class="hljs-string">`json:&quot;first_name&quot;`</span>LastName  <span class="hljs-keyword">string</span>   <span class="hljs-string">`json:&quot;last_name&quot;`</span>Age       <span class="hljs-keyword">int</span>      <span class="hljs-string">`json:&quot;age&quot;`</span>About     <span class="hljs-keyword">string</span>   <span class="hljs-string">`json:&quot;about&quot;`</span>Interests []<span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;interests&quot;`</span>&#125;<span class="hljs-comment">//初始化</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">//errorlog := log.New(os.Stdout, &quot;APP&quot;, log.LstdFlags)</span><span class="hljs-keyword">var</span> err error<span class="hljs-comment">//这个地方有个小坑 不加上elastic.SetSniff(false) 会连接不上</span>client, err = elastic.NewClient(elastic.SetSniff(<span class="hljs-literal">false</span>), elastic.SetURL(host))<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;_,_,err = client.Ping(host).Do(context.Background())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;<span class="hljs-comment">//fmt.Printf(&quot;Elasticsearch returned with code %d and version %s\n&quot;, code, info.Version.Number)</span>_,err = client.ElasticsearchVersion(host)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;<span class="hljs-comment">//fmt.Printf(&quot;Elasticsearch version %s\n&quot;, esversion)</span>&#125;<span class="hljs-comment">//创建</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">//使用结构体</span>e1 := Employee&#123;<span class="hljs-string">&quot;Jane&quot;</span>, <span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-number">32</span>, <span class="hljs-string">&quot;I like to collect rock albums&quot;</span>, []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;music&quot;</span>&#125;&#125;put1, err := client.Index().Index(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Id(<span class="hljs-string">&quot;1&quot;</span>).BodyJson(e1).Do(context.Background())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;fmt.Printf(<span class="hljs-string">&quot;Indexed tweet %s to index s%s, type %s\n&quot;</span>, put1.Id, put1.Index, put1.Type)<span class="hljs-comment">//使用字符串</span>e2 := <span class="hljs-string">`&#123;&quot;first_name&quot;:&quot;John&quot;,&quot;last_name&quot;:&quot;Smith&quot;,&quot;age&quot;:25,&quot;about&quot;:&quot;I love to go rock climbing&quot;,&quot;interests&quot;:[&quot;sports&quot;,&quot;music&quot;]&#125;`</span>put2, err := client.Index().Index(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Id(<span class="hljs-string">&quot;2&quot;</span>).BodyJson(e2).Do(context.Background())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;fmt.Printf(<span class="hljs-string">&quot;Indexed tweet %s to index s%s, type %s\n&quot;</span>, put2.Id, put2.Index, put2.Type)e3 := <span class="hljs-string">`&#123;&quot;first_name&quot;:&quot;Douglas&quot;,&quot;last_name&quot;:&quot;Fir&quot;,&quot;age&quot;:35,&quot;about&quot;:&quot;I like to build cabinets&quot;,&quot;interests&quot;:[&quot;forestry&quot;]&#125;`</span>put3, err := client.Index().Index(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Id(<span class="hljs-string">&quot;3&quot;</span>).BodyJson(e3).Do(context.Background())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;fmt.Printf(<span class="hljs-string">&quot;Indexed tweet %s to index s%s, type %s\n&quot;</span>, put3.Id, put3.Index, put3.Type)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;create()&#125;</code></pre><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;encoding/json&quot;</span><span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;github.com/olivere/elastic&quot;</span>)<span class="hljs-keyword">var</span> client *elastic.Client<span class="hljs-keyword">var</span> host = <span class="hljs-string">&quot;http://192.168.43.176:9200&quot;</span><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;FirstName <span class="hljs-keyword">string</span>   <span class="hljs-string">`json:&quot;first_name&quot;`</span>LastName  <span class="hljs-keyword">string</span>   <span class="hljs-string">`json:&quot;last_name&quot;`</span>Age       <span class="hljs-keyword">int</span>      <span class="hljs-string">`json:&quot;age&quot;`</span>About     <span class="hljs-keyword">string</span>   <span class="hljs-string">`json:&quot;about&quot;`</span>Interests []<span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;interests&quot;`</span>&#125;<span class="hljs-comment">//初始化</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">//errorlog := log.New(os.Stdout, &quot;APP&quot;, log.LstdFlags)</span><span class="hljs-keyword">var</span> err error<span class="hljs-comment">//这个地方有个小坑 不加上elastic.SetSniff(false) 会连接不上</span>client, err = elastic.NewClient(elastic.SetSniff(<span class="hljs-literal">false</span>), elastic.SetURL(host))<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;_, _, err = client.Ping(host).Do(context.Background())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;<span class="hljs-comment">//fmt.Printf(&quot;Elasticsearch returned with code %d and version %s\n&quot;, code, info.Version.Number)</span>_, err = client.ElasticsearchVersion(host)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;<span class="hljs-comment">//fmt.Printf(&quot;Elasticsearch version %s\n&quot;, esversion)</span>&#125;<span class="hljs-comment">//查找</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gets</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">//通过id查找</span>get1, err := client.Get().Index(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Id(<span class="hljs-string">&quot;2&quot;</span>).Do(context.Background())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;<span class="hljs-keyword">if</span> get1.Found &#123;fmt.Printf(<span class="hljs-string">&quot;Got document %s in version %d from index %s, type %s\n&quot;</span>, get1.Id, get1.Version, get1.Index, get1.Type)<span class="hljs-keyword">var</span> bb Employeeerr := json.Unmarshal(get1.Source, &amp;bb)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;fmt.Println(err)&#125;fmt.Println(bb.FirstName)fmt.Println(<span class="hljs-keyword">string</span>(get1.Source))&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">//create()</span>gets()&#125;</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code class="hljs go"><span class="hljs-comment">//删除</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span> &#123;res, err := client.Delete().Index(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Id(<span class="hljs-string">&quot;1&quot;</span>).Do(context.Background())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">println</span>(err.Error())<span class="hljs-keyword">return</span>&#125;fmt.Printf(<span class="hljs-string">&quot;delete result %s\n&quot;</span>, res.Result)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">//create()</span><span class="hljs-comment">//gets()</span><span class="hljs-built_in">delete</span>()&#125;</code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><pre><code class="hljs go"><span class="hljs-comment">//修改</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span> &#123;res, err := client.Update().Index(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Id(<span class="hljs-string">&quot;2&quot;</span>).Doc(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">88</span>&#125;).Do(context.Background())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">println</span>(err.Error())&#125;fmt.Printf(<span class="hljs-string">&quot;update age %s\n&quot;</span>, res.Result)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">//create()</span><span class="hljs-comment">//gets()</span><span class="hljs-comment">//delete()</span>update()&#125;</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><pre><code class="hljs go"><span class="hljs-comment">////搜索</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> res *elastic.SearchResult<span class="hljs-keyword">var</span> err error<span class="hljs-comment">//取所有</span>res, err = client.Search(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Do(context.Background())printEmployee(res, err)<span class="hljs-comment">//字段相等</span>q := elastic.NewQueryStringQuery(<span class="hljs-string">&quot;last_name:Smith&quot;</span>)res, err = client.Search(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Query(q).Do(context.Background())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">println</span>(err.Error())&#125;printEmployee(res, err)<span class="hljs-comment">//条件查询</span><span class="hljs-comment">//年龄大于30岁的</span>boolQ := elastic.NewBoolQuery()boolQ.Must(elastic.NewMatchQuery(<span class="hljs-string">&quot;last_name&quot;</span>, <span class="hljs-string">&quot;smith&quot;</span>))boolQ.Filter(elastic.NewRangeQuery(<span class="hljs-string">&quot;age&quot;</span>).Gt(<span class="hljs-number">30</span>))res, err = client.Search(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Query(q).Do(context.Background())printEmployee(res, err)<span class="hljs-comment">//短语搜索 搜索about字段中有 rock climbing</span>matchPhraseQuery := elastic.NewMatchPhraseQuery(<span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-string">&quot;rock climbing&quot;</span>)res, err = client.Search(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Query(matchPhraseQuery).Do(context.Background())printEmployee(res, err)<span class="hljs-comment">//分析 interests</span>aggs := elastic.NewTermsAggregation().Field(<span class="hljs-string">&quot;interests&quot;</span>)res, err = client.Search(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Aggregation(<span class="hljs-string">&quot;all_interests&quot;</span>, aggs).Do(context.Background())printEmployee(res, err)&#125;<span class="hljs-comment">//</span><span class="hljs-comment">////简单分页</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">list</span><span class="hljs-params">(size,page <span class="hljs-keyword">int</span>)</span></span> &#123;<span class="hljs-keyword">if</span> size &lt; <span class="hljs-number">0</span> || page &lt; <span class="hljs-number">1</span> &#123;fmt.Printf(<span class="hljs-string">&quot;param error&quot;</span>)<span class="hljs-keyword">return</span>&#125;res,err := client.Search(<span class="hljs-string">&quot;megacorp&quot;</span>).Type(<span class="hljs-string">&quot;employee&quot;</span>).Size(size).From((page<span class="hljs-number">-1</span>)*size).Do(context.Background())printEmployee(res, err)&#125;<span class="hljs-comment">//</span><span class="hljs-comment">//打印查询到的Employee</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printEmployee</span><span class="hljs-params">(res *elastic.SearchResult, err error)</span></span> &#123;<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">print</span>(err.Error())<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">var</span> typ Employee<span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> res.Each(reflect.TypeOf(typ)) &#123; <span class="hljs-comment">//从搜索结果中取数据的方法</span>t := item.(Employee)fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, t)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">//create()</span><span class="hljs-comment">//gets()</span><span class="hljs-comment">//delete()</span><span class="hljs-comment">//update()</span>gets()query()list(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>golang</tag>
      
      <tag>elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>consul+consul-template+nginx 自动负载均衡</title>
    <link href="/posts/2045f4f9.html"/>
    <url>/posts/2045f4f9.html</url>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li><p>consul</p></li><li><p>consult-template</p></li><li><p>nginx</p></li></ul><h1 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h1><ul><li>安装依赖</li></ul><pre><code class="hljs nginx"><span class="hljs-attribute">yum</span> -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></pre><ul><li>下载nginx</li></ul><pre><code class="hljs nginx"><span class="hljs-attribute">wget</span> http://nginx.org/download/nginx-1.19.10.tar.gz</code></pre><p>也可以自己下载你 <a href="http://nginx.org/download">选择版本</a></p><pre><code class="hljs nginx"><span class="hljs-attribute">tar</span> -xvf nginx-<span class="hljs-number">1</span>.<span class="hljs-number">19</span>.<span class="hljs-number">10</span>.tar.gz</code></pre><ul><li>进入到目录执行命令</li></ul><pre><code class="hljs nginx">./configuremake<span class="hljs-attribute">make</span> install</code></pre><ul><li>修改默认配置文件(默认80端口按需修改)</li></ul><p><img src="https://i.loli.net/2021/04/16/wJbR8YleGftPWku.png" alt="screenshot-20210416-142319.png"></p><ul><li>ip加端口访问nginx默认页面</li></ul><p><img src="https://i.loli.net/2021/04/16/gtj7oJ2HmDNalWK.png" alt="screenshot-20210416-153434.png"></p><p>nginx安装完成</p><p>nginx启动失败：Redirecting to /bin/systemctl start nginx.service Failed to start nginx.service: Unit n…</p><p>是因为nginx没有有添加到系统服务，手动手动添加一个即可。</p><p>在 /etc/init.d/下创建名为nginx的启动脚本即可，内容如下：</p><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment">#</span><span class="hljs-comment"># chkconfig: - 85 15</span><span class="hljs-comment"># description: Nginx is a World Wide Web server.</span><span class="hljs-comment"># processname: nginx</span>nginx=/usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginxconf=/usr/<span class="hljs-built_in">local</span>/nginx/conf/nginx.conf<span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span>start)<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Starting Nginx&quot;</span><span class="hljs-variable">$nginx</span> -c <span class="hljs-variable">$conf</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done&quot;</span>;;stop)<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Stopping Nginx&quot;</span>killall -9 nginx<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done&quot;</span>;;<span class="hljs-built_in">test</span>)<span class="hljs-variable">$nginx</span> -t -c <span class="hljs-variable">$conf</span>;;reload)<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Reloading Nginx&quot;</span>ps auxww | grep nginx | grep master | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="hljs-built_in">kill</span> -HUP<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done&quot;</span>;;restart)<span class="hljs-variable">$0</span> stop<span class="hljs-variable">$0</span> start;;show)ps -aux|grep nginx;;*)<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> &#123;start|restart|reload|stop|test|show&#125;&quot;</span>;;<span class="hljs-keyword">esac</span></code></pre><p>设置执行权限：<code>chmod +x /etc/init.d/nginx</code></p><p>注册成服务：<code>chkconfig --add nginx</code></p><p>设置开机启动：<code>chkconfig nginx on</code></p><h1 id="consul安装"><a href="#consul安装" class="headerlink" title="consul安装"></a>consul安装</h1><ul><li>下载consul安装包</li></ul><pre><code class="hljs sh">wget https://releases.hashicorp.com/consul/1.9.4/consul_1.9.4_linux_amd64.zip</code></pre><p>附上<a href="https://releases.hashicorp.com/consul/">下载地址</a></p><ul><li>解压</li></ul><pre><code class="hljs shell">unzip consul_1.9.4_linux_amd64.zip</code></pre><ul><li>服务端启动代码</li></ul><pre><code class="hljs sh">consul agent -server -ui -<span class="hljs-built_in">bind</span> 27.252.10.25 -client=0.0.0.0  -data-dir /mnt/consul/data -bootstrap -node master</code></pre><ul><li>客户端启动代码</li></ul><pre><code class="hljs sh">consul agent -<span class="hljs-built_in">bind</span> 172.21.247.22 -client=0.0.0.0  -data-dir /mnt/consul/data -join 27.252.10.25 -node node1</code></pre><ul><li>consul 安装成功</li></ul><p>注:阿里云服务器无法绑定外网ip,绑定到内网ip就行了,在外网可以访问.</p><h1 id="consul-template安装"><a href="#consul-template安装" class="headerlink" title="consul-template安装"></a>consul-template安装</h1><p>consul-template需要和nginx安装在一台机器上</p><ul><li>下载consul-template</li></ul><pre><code class="hljs sh">wget https://releases.hashicorp.com/consul-template/0.25.2/consul-template_0.25.2_linux_amd64.zip</code></pre><p>可以选择<a href="https://releases.hashicorp.com/consul-template">其他版本</a></p><ul><li>解压</li></ul><pre><code class="hljs sh">unzpi consul-template_0.25.2_linux_amd64.zip</code></pre><ul><li>配置脚本文件 nginx.temp.ctmpl</li></ul><pre><code class="hljs nginx">upstream &#123;&#123;$name&#125;&#125; &#123;  zone upstream-&#123;&#123;$name&#125;&#125; 64k;  &#123;&#123;range $service&#125;&#125;server &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125; max_fails=3 fail_timeout=60 weight=1;  &#123;&#123;else&#125;&#125;server 127.0.0.1:65535; # force a 502&#123;&#123;end&#125;&#125;&#125; &#123;&#123;end&#125;&#125;<span class="hljs-section">server</span> &#123;  <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>; <span class="hljs-attribute">server_name</span> servername.com;&#123;&#123;range services&#125;&#125; &#123;&#123;$name := .Name&#125;&#125;  location /&#123;&#123;$name&#125;&#125;/ &#123;    proxy_pass http://&#123;&#123;$name&#125;&#125;/;  &#125;&#123;&#123;end&#125;&#125;&#125;</code></pre><p>启动更新</p><pre><code class="hljs sh">./consul-template  -consul-addr 172.21.247.21:8500 -template=<span class="hljs-string">&quot;nginx.temp.ctmpl:/etc/nginx/conf.d/nginx.conf:service nginx reload&quot;</span> -once</code></pre><p>注: -once代表只运行一次</p>]]></content>
    
    
    
    <tags>
      
      <tag>consul-template</tag>
      
      <tag>consul</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.net core部署linux环境安装ssl证书</title>
    <link href="/posts/1770d61b.html"/>
    <url>/posts/1770d61b.html</url>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>CentOS 7.8</li><li>dotnet 3.1</li><li>宝塔 7.4.5</li></ul><h1 id="新建站点"><a href="#新建站点" class="headerlink" title="新建站点"></a>新建站点</h1><p>需要在宝塔面板安装Nginx,然后在网站里面新建网站<br><img src="https://i.loli.net/2020/12/01/7y28mgq6Zce9JMj.png" alt="新建站点"><br>这里站点最好以域名来命名,方便记忆.<br>这里新建站点的目的在于新建目录和新建Nginx配置文件,方便后面修改和上传文件.</p><h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><p>上传文件比较方便,如果是正式环境建议走个svn或者git,便于版本管理,当然没走docker也可以.博主这里就简单的上传一下.<br><img src="https://i.loli.net/2020/12/01/8KXYpUrS2Hk6vfE.png" alt="上传文件"><br>找到相应的目录直接拖进去就行了,文件数量过多的时候建议压缩一下.</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>启动的话其实是supervisor做守护,所以需要在宝塔面板安装supervisor,然后添加守护.<br><img src="https://i.loli.net/2020/12/01/RNblJITdAn4uwH9.png" alt="添加守护进程"><br>这里需要说明启动命令,启动命令需要指明绝对路径,虽然下面提示有说明,这里在强调一边.<br /><br>这里记得程序里面附加的端口号,Nginx配制的时候需要使用.</p><h1 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h1><p>上面的操作之后只是能够根据端口访问,但还没附加到域名上.<br><img src="https://i.loli.net/2020/12/01/qpg5ifmUSC7jJxG.png" alt="默认配置"><br>下面贴出来博主的配置,给大家做个参考.</p><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> test.baidu.com &#123;        <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8021</span>      weight=<span class="hljs-number">10</span>;        &#125;server&#123;  <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;    <span class="hljs-attribute">server_name</span> test.baidu.com;    <span class="hljs-attribute">index</span> index.php index.html index.htm default.php default.htm default.html;    <span class="hljs-attribute">root</span> /www/wwwroot/test.baidu.com;        <span class="hljs-comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span>    <span class="hljs-comment">#error_page 404/404.html;</span>    <span class="hljs-comment">#HTTP_TO_HTTPS_START</span>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$server_port</span> !<span class="hljs-regexp">~ 443)</span>&#123;        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(/.*)$</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;    &#125;    <span class="hljs-comment">#HTTP_TO_HTTPS_END</span>    <span class="hljs-attribute">ssl_certificate</span>    /www/server/panel/vhost/ssl/test.pem;    <span class="hljs-attribute">ssl_certificate_key</span>    /www/server/panel/vhost/ssl/testkey.pem;    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;    <span class="hljs-attribute">ssl_ciphers</span> EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">10m</span>;    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">10m</span>;    <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=31536000&quot;</span>;    <span class="hljs-attribute">error_page</span> <span class="hljs-number">497</span>  https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;    <span class="hljs-comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span>    <span class="hljs-comment">#error_page 404/404.html;</span>    <span class="hljs-comment">#SSL-END</span>        <span class="hljs-comment">#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span>    <span class="hljs-comment">#error_page 404 /404.html;</span>    <span class="hljs-comment">#error_page 502 /502.html;</span>    <span class="hljs-comment">#ERROR-PAGE-END</span>        <span class="hljs-comment">#PHP-INFO-START  PHP引用配置，可以注释或修改</span>    <span class="hljs-attribute">include</span> enable-php-<span class="hljs-number">00</span>.conf;    <span class="hljs-comment">#PHP-INFO-END</span>        <span class="hljs-comment">#REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效</span>    <span class="hljs-attribute">include</span> /www/server/panel/vhost/rewrite/test.baidu.com.conf;    <span class="hljs-comment">#REWRITE-END</span>        <span class="hljs-comment">#禁止访问的文件或目录</span>   <span class="hljs-attribute">location</span> / &#123;                <span class="hljs-attribute">proxy_pass</span> http://test.baidu.com;                <span class="hljs-comment"># proxy_redirect on;</span>                 <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;                <span class="hljs-comment"># proxy_set_header X-Forwarded-For $remote_addr;</span>                 <span class="hljs-attribute">proxy_set_header</span> Via <span class="hljs-string">&quot;nginx&quot;</span>;                 <span class="hljs-attribute">proxy_set_header</span> Runtime-Mode <span class="hljs-string">&quot;Debug&quot;</span>;                <span class="hljs-comment"># proxy_buffering off;</span>                <span class="hljs-comment"># proxy_ignore_client_abort on;</span>                <span class="hljs-comment">##                proxy_connect_timeout 90;</span><span class="hljs-comment">#                proxy_send_timeout 90;</span><span class="hljs-comment">#                proxy_read_timeout 90;</span><span class="hljs-comment">#                proxy_buffer_size 4k;</span><span class="hljs-comment">#                proxy_buffers 4 32k;</span><span class="hljs-comment">#                proxy_busy_buffers_size 64k;</span><span class="hljs-comment">#                proxy_temp_file_write_size 64k;</span>        &#125;    <span class="hljs-attribute">access_log</span>  /www/wwwlogs/test.baidu.com.log;    <span class="hljs-attribute">error_log</span>  /www/wwwlogs/test.baidu.com.<span class="hljs-literal">error</span>.log;&#125;</code></pre><h1 id="ssl证书"><a href="#ssl证书" class="headerlink" title="ssl证书"></a>ssl证书</h1><p>现在在网上还是比较容易申请到ssl证书,博主这里介绍的是不能进行域名验证的情况,或者是测试环境使用的sll证书.需要下载<a href="https://keymanager.org/">keymanager</a>,下载后进入到主界面<img src="https://i.loli.net/2020/12/01/TvDG5eOlf8Axqu7.png" alt="keymanager"><br>然后点右上角<code>创建测试证书</code><br><img src="https://i.loli.net/2020/12/01/ykn9UXsNpoWqv76.png" alt="创建证书"><br>这里需要注意选择的CA证书,后面需要安装CA证书才不会出现提示,其他默认就行.证书申请完后,如果只是本机实用就一键安装,如果需要给同事实用就下载CA证书分发给需要使用的电脑.<br><img src="https://i.loli.net/2020/12/01/gyLrZn7pMswkXRc.png" alt="导出CA证书"></p>]]></content>
    
    
    <categories>
      
      <category>core</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssl</tag>
      
      <tag>core</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins构建golang程序并推送到dockerhub仓库或推送svn</title>
    <link href="/posts/b4c2a28b.html"/>
    <url>/posts/b4c2a28b.html</url>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>linux系统</li><li>安装jenkins</li><li>安装go环境</li><li>安装docker环境</li></ul><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>新建一个freestylex项目<br><img src="https://i.loli.net/2020/11/17/KQ9UgrLvyROlpT8.png" alt="新建项目"></p><h1 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h1><p>配置git地址,注意分支别写错<br><img src="https://i.loli.net/2020/11/17/w2aXGCQde64JnvZ.png" alt="配置git"></p><p>添加一步Excute sell构建步骤,注意这个步骤是linux执行的脚本,不适用win环境.</p><p><img src="https://i.loli.net/2020/11/16/fElm2L4vKtnF6N8.png" alt="构建"></p><p>如下是构建的代码,前面是构建的时候找不到go的环境变量,博主见简单粗暴的吧把go env的环境变量拷贝过来就可以执行了.</p><p>docker上传的仓库需要在构建的机器上登录,才能上传.</p><pre><code class="hljs routeros"><span class="hljs-comment">#!/bin/sh</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOARCH</span>=<span class="hljs-string">&quot;amd64&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOBIN</span>=<span class="hljs-string">&quot;/usr/local/go/bin&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOCACHE</span>=<span class="hljs-string">&quot;/root/.cache/go-build&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOENV</span>=<span class="hljs-string">&quot;/root/.config/go/env&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOHOSTARCH</span>=<span class="hljs-string">&quot;amd64&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOHOSTOS</span>=<span class="hljs-string">&quot;linux&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOOS</span>=<span class="hljs-string">&quot;linux&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOPATH</span>=<span class="hljs-string">&quot;/root/go&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOPROXY</span>=<span class="hljs-string">&quot;https://goproxy.io/&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOROOT</span>=<span class="hljs-string">&quot;/usr/local/go&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOSUMDB</span>=<span class="hljs-string">&quot;sum.golang.org&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOTOOLDIR</span>=<span class="hljs-string">&quot;/usr/local/go/pkg/tool/linux_amd64&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GCCGO</span>=<span class="hljs-string">&quot;gccgo&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">AR</span>=<span class="hljs-string">&quot;ar&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CC</span>=<span class="hljs-string">&quot;gcc&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CXX</span>=<span class="hljs-string">&quot;g++&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CGO_ENABLED</span>=<span class="hljs-string">&quot;1&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOMOD</span>=<span class="hljs-string">&quot;/application/jenkinsdata/workspace/go部署测试/go.mod&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CGO_CFLAGS</span>=<span class="hljs-string">&quot;-g -O2&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CGO_CXXFLAGS</span>=<span class="hljs-string">&quot;-g -O2&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CGO_FFLAGS</span>=<span class="hljs-string">&quot;-g -O2&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CGO_LDFLAGS</span>=<span class="hljs-string">&quot;-g -O2&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PKG_CONFIG</span>=<span class="hljs-string">&quot;pkg-config&quot;</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOGCCFLAGS</span>=<span class="hljs-string">&quot;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build441126206=/tmp/go-build -gno-record-gcc-switches&quot;</span>id<span class="hljs-builtin-name">set</span> +eecho <span class="hljs-string">&#x27;&gt;&gt;&gt; Get old container id&#x27;</span><span class="hljs-attribute">CID</span>=$(docker ps | grep <span class="hljs-string">&quot;apache&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<span class="hljs-comment">#截取dockerfile里面的版本号</span><span class="hljs-attribute">VERSION</span>=$(grep <span class="hljs-string">&quot;version&quot;</span> /application/jenkinsdata/workspace/go部署测试/Dockerfile | awk -F <span class="hljs-string">&quot;=&quot;</span>  <span class="hljs-string">&#x27;&#123;print$2&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | sed -s <span class="hljs-string">&#x27;s/&quot;//g&#x27;</span>)echo <span class="hljs-variable">$CID</span>echo <span class="hljs-variable">$VERSION</span>echo <span class="hljs-string">&#x27;&gt;&gt;&gt; 进入到目录&#x27;</span>cd /application/jenkinsdata/workspace/go部署测试/sh /root/env.sh &gt;&gt; ~/.bashrc  &amp;&amp; source ~/.bashrcecho <span class="hljs-string">&#x27;&gt;&gt;&gt; 开始构建&#x27;</span>go build -o wh110api main.go<span class="hljs-comment">#开始进行docker构建</span>docker build -t a624669980/wh110api:<span class="hljs-variable">$VERSION</span> . | tee /etc/docker/docker_build_result.log<span class="hljs-attribute">RESULT</span>=$(cat /etc/docker/docker_build_result.log | tail -n 1)<span class="hljs-comment">#if [[&quot;$RESULT&quot; != *Successfully*]];then</span><span class="hljs-comment">#  exit -1</span><span class="hljs-comment">#fi</span>echo <span class="hljs-string">&#x27;&gt;&gt;&gt; Stopping old container&#x27;</span><span class="hljs-comment">#if [ &quot;$CID&quot; != &quot;&quot; ];then</span><span class="hljs-comment">#  docker stop $CID</span><span class="hljs-comment">#fi</span><span class="hljs-comment">#echo &#x27;&gt;&gt;&gt; Restarting docker&#x27;</span><span class="hljs-comment">#service docker.io restart</span><span class="hljs-comment">#sleep 5</span>  echo <span class="hljs-string">&#x27;&gt;&gt;&gt; Starting new container&#x27;</span>docker push a624669980/wh110api:<span class="hljs-variable">$VERSION</span><span class="hljs-comment">#RESULT=$(cat /etc/docker/docker_build_result.log | tail -n 1)</span>echo <span class="hljs-string">&#x27;&gt;&gt;&gt; push end&#x27;</span></code></pre><p>构建成功后仓库就会更新.<br><img src="https://i.loli.net/2020/11/17/TmbXhPFwGEiIAc8.png" alt="构建成功"></p><h1 id="推送svn"><a href="#推送svn" class="headerlink" title="推送svn"></a>推送svn</h1><p>新建项目都一样只是Excute sell语句不同.</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><span class="hljs-built_in">export</span> GOARCH=<span class="hljs-string">&quot;amd64&quot;</span><span class="hljs-built_in">export</span> GOBIN=<span class="hljs-string">&quot;/usr/local/go/bin&quot;</span><span class="hljs-built_in">export</span> GOCACHE=<span class="hljs-string">&quot;/root/.cache/go-build&quot;</span><span class="hljs-built_in">export</span> GOENV=<span class="hljs-string">&quot;/root/.config/go/env&quot;</span><span class="hljs-built_in">export</span> GOHOSTARCH=<span class="hljs-string">&quot;amd64&quot;</span><span class="hljs-built_in">export</span> GOHOSTOS=<span class="hljs-string">&quot;linux&quot;</span><span class="hljs-built_in">export</span> GOOS=<span class="hljs-string">&quot;linux&quot;</span><span class="hljs-built_in">export</span> GOPATH=<span class="hljs-string">&quot;/root/go&quot;</span><span class="hljs-built_in">export</span> GOPROXY=<span class="hljs-string">&quot;https://goproxy.io/&quot;</span><span class="hljs-built_in">export</span> GOROOT=<span class="hljs-string">&quot;/usr/local/go&quot;</span><span class="hljs-built_in">export</span> GOSUMDB=<span class="hljs-string">&quot;sum.golang.org&quot;</span><span class="hljs-built_in">export</span> GOTOOLDIR=<span class="hljs-string">&quot;/usr/local/go/pkg/tool/linux_amd64&quot;</span><span class="hljs-built_in">export</span> GCCGO=<span class="hljs-string">&quot;gccgo&quot;</span><span class="hljs-built_in">export</span> AR=<span class="hljs-string">&quot;ar&quot;</span><span class="hljs-built_in">export</span> CC=<span class="hljs-string">&quot;gcc&quot;</span><span class="hljs-built_in">export</span> CXX=<span class="hljs-string">&quot;g++&quot;</span><span class="hljs-built_in">export</span> CGO_ENABLED=<span class="hljs-string">&quot;1&quot;</span><span class="hljs-built_in">export</span> GOMOD=<span class="hljs-string">&quot;/application/jenkinsdata/workspace/外汇110api/go.mod&quot;</span><span class="hljs-built_in">export</span> CGO_CFLAGS=<span class="hljs-string">&quot;-g -O2&quot;</span><span class="hljs-built_in">export</span> CGO_CXXFLAGS=<span class="hljs-string">&quot;-g -O2&quot;</span><span class="hljs-built_in">export</span> CGO_FFLAGS=<span class="hljs-string">&quot;-g -O2&quot;</span><span class="hljs-built_in">export</span> CGO_LDFLAGS=<span class="hljs-string">&quot;-g -O2&quot;</span><span class="hljs-built_in">export</span> PKG_CONFIG=<span class="hljs-string">&quot;pkg-config&quot;</span><span class="hljs-built_in">export</span> GOGCCFLAGS=<span class="hljs-string">&quot;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build441126206=/tmp/go-build -gno-record-gcc-switches&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&gt;&gt;&gt; 进入到目录&#x27;</span><span class="hljs-built_in">cd</span> /application/jenkinsdata/workspace/外汇110api/<span class="hljs-comment">#sh /root/env.sh &gt;&gt; ~/.bashrc  &amp;&amp; source ~/.bashrc</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&gt;&gt;&gt; 开始构建&#x27;</span>go build -o wh110api main.go<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&gt;&gt;&gt; 构建完成&#x27;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&gt;&gt;&gt; 拷贝文件&#x27;</span>\cp -rf /application/jenkinsdata/workspace/外汇110api/* /mnt/wh110/<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&gt;&gt;&gt; 构建结束&#x27;</span><span class="hljs-built_in">cd</span> /mnt/wh110svn st|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs svn add --forcesvn commit -m <span class="hljs-string">&quot;auto push&quot;</span> *ssh root@xxx.xxx.xxx <span class="hljs-string">&quot;svn update /mnt/wh110;chmod 777 -R /mnt/wh110;supervisorctl restart golang-wh110-server&quot;</span></code></pre><p>注意,go编译出来的是可执行文件,所以需要给权限才能启动,这里给权限然后重启supervisor,这里在特殊说一下supervisor设置好环境变量一定要更新配置文件才会生效.使用cp命令的时候会提示覆盖,记得前面加上反斜杠.</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>构建成功后就可以正常使用了!docker的构建推送jenkins提供的有插件,博主弄了一会没弄好,也还是需要弄环境,不如就弄go和docker的环境了.构建之前可以先手动在构建的机器上执行构建步骤,然后在jenkins里面执行,基本没啥大问题.</p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>jenkins</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang连接及操作mongodb数据库</title>
    <link href="/posts/28da225b.html"/>
    <url>/posts/28da225b.html</url>
    
    <content type="html"><![CDATA[<h1 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h1><p>go链接mongodb的驱动早起用的比较多的是<a href="https://github.com/go-mgo/mgo">mgo</a>,但是好像不更新了,所以就选用了官方的mongodb的<a href="https://github.com/mongodb/mongo-go-driver">go驱动</a>.</p><p><img src="https://i.loli.net/2020/11/14/LU4tur7lAzenPND.png" alt="mongodb"></p><pre><code class="hljs awk"><span class="hljs-string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span>    <span class="hljs-regexp">//</span>BOSN解析包<span class="hljs-string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span>    <span class="hljs-regexp">//</span>MongoDB的Go驱动包</code></pre><h1 id="BSON介绍"><a href="#BSON介绍" class="headerlink" title="BSON介绍"></a>BSON介绍</h1><p>BSON是一种类json的一种二进制形式的存储格式，简称Binary JSON。MongoDB使用了BSON这种结构来存储数据和网络数据交换。</p><p>BSON对应Document这个概念，因为BSON是schema-free的，所以在MongoDB中所对应的Document也有这个特征，这里的一个Document也可以理解成关系数据库中的一条Record，只是Document的变化更丰富一些，Document可以嵌套。</p><p>MongoDB以BSON做为其存储结构的一个重要原因是它的可遍历性。</p><p>BSON编码扩展了JSON表示，使其包含额外的类型，如int、long、date、浮点数和decimal128。</p><h1 id="BSON类型"><a href="#BSON类型" class="headerlink" title="BSON类型"></a>BSON类型</h1><p>BSON数据的主要类型有：A，D，E，M和Raw。其中，A是数组，D是切片，M是映射，D和M是Go原生类型。</p><ul><li>A类型表示有序的BSON数组。</li></ul><pre><code class="hljs apache"><span class="hljs-attribute">bson</span>.A&#123;<span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-number">3</span>.<span class="hljs-number">14159</span>, bson.D&#123;&#123;<span class="hljs-string">&quot;qux&quot;</span>, <span class="hljs-number">12345</span>&#125;&#125;&#125;</code></pre><ul><li>D类型表示包含有序元素的BSON文档。这种类型应该在顺序重要的情况下使用。如果元素的顺序无关紧要，则应使用M代替。</li></ul><pre><code class="hljs apache"><span class="hljs-attribute">bson</span>.D&#123;&#123;<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;pi&quot;</span>, <span class="hljs-number">3</span>.<span class="hljs-number">14159</span>&#125;&#125;</code></pre><ul><li>M类型表示无序的映射。</li></ul><pre><code class="hljs apache"><span class="hljs-attribute">bson</span>.M&#123;<span class="hljs-string">&quot;foo&quot;</span>: <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>: <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-string">&quot;pi&quot;</span>: <span class="hljs-number">3</span>.<span class="hljs-number">14159</span>&#125;</code></pre><ul><li><p>E类型表示D里面的一个BSON元素。</p></li><li><p>Raw类型代表未处理的原始BSON文档和元素，Raw系列类型用于验证和检索字节切片中的元素。当要查找BSON字节而不将其解编为另一种类型时，此类型最有用。</p><h1 id="连接mongodb"><a href="#连接mongodb" class="headerlink" title="连接mongodb"></a>连接mongodb</h1></li></ul><pre><code class="hljs stata"><span class="hljs-comment">// 设置mongoDB客户端连接信息</span>param := fmt.Sprintf(<span class="hljs-string">&quot;mongodb://XXX.XXX.XXX.XXX:27017&quot;</span>)clientOptions := options.Client().ApplyURI(param)<span class="hljs-comment">// 建立客户端连接</span>client, <span class="hljs-keyword">err</span> := mongo.Connect(context.TODO(), clientOptions)<span class="hljs-keyword">if</span> <span class="hljs-keyword">err</span> != nil &#123;<span class="hljs-keyword">log</span>.Fatal(<span class="hljs-keyword">err</span>)fmt.Println(<span class="hljs-keyword">err</span>)&#125;<span class="hljs-comment">// 检查连接情况</span><span class="hljs-keyword">err</span> = client.Ping(context.TODO(), nil)<span class="hljs-keyword">if</span> <span class="hljs-keyword">err</span> != nil &#123;<span class="hljs-keyword">log</span>.Fatal(<span class="hljs-keyword">err</span>)fmt.Println(<span class="hljs-keyword">err</span>)&#125;fmt.Println(<span class="hljs-string">&quot;Connected to MongoDB!&quot;</span>)<span class="hljs-comment">//指定要操作的数据集</span>collection := client.Database(<span class="hljs-string">&quot;ccmsensor&quot;</span>).Collection(<span class="hljs-string">&quot;mtr&quot;</span>)<span class="hljs-comment">//执行增删改查操作</span><span class="hljs-comment">// 断开客户端连接</span><span class="hljs-keyword">err</span> = client.Disconnect(context.TODO())<span class="hljs-keyword">if</span> <span class="hljs-keyword">err</span> != nil &#123;<span class="hljs-keyword">log</span>.Fatal(<span class="hljs-keyword">err</span>)&#125;fmt.Println(<span class="hljs-string">&quot;Connection to MongoDB closed.&quot;</span>)</code></pre><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="根据id查询"><a href="#根据id查询" class="headerlink" title="根据id查询"></a>根据id查询</h2><pre><code class="hljs roboconf">objid, err := primitive.ObjectIDFromHex(id)if err != nil &#123;<span class="hljs-attribute">logging.Error(&quot;根据id获取新闻详情错误&quot;, err)</span><span class="hljs-attribute">&#125;</span><span class="hljs-attribute">filter</span> := bson<span class="hljs-variable">.D</span>&#123;&#123;&quot;_id&quot;, objid&#125;&#125;//var news =News&#123;&#125;singleResult := client<span class="hljs-variable">.Database</span>(m<span class="hljs-variable">.database</span>)<span class="hljs-variable">.Collection</span>(m<span class="hljs-variable">.collection</span>)<span class="hljs-variable">.FindOne</span>(context<span class="hljs-variable">.TODO</span>(), filter)</code></pre><h2 id="随机查询N条记录-多记录解析"><a href="#随机查询N条记录-多记录解析" class="headerlink" title="随机查询N条记录(多记录解析)"></a>随机查询N条记录(多记录解析)</h2><h2 id="单条件查询"><a href="#单条件查询" class="headerlink" title="单条件查询"></a>单条件查询</h2><h3 id="等于"><a href="#等于" class="headerlink" title="等于"></a>等于</h3><pre><code class="hljs reasonml">c.<span class="hljs-constructor">Find(<span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jimmy Kuu&quot;</span>&#125;)</span>.<span class="hljs-constructor">All(&amp;<span class="hljs-params">users</span>)</span></code></pre><h3 id="不等于"><a href="#不等于" class="headerlink" title="不等于"></a>不等于</h3><pre><code class="hljs reasonml">c.<span class="hljs-constructor">Find(<span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;$ne&quot;</span>: <span class="hljs-string">&quot;Jimmy Kuu&quot;</span>&#125;&#125;)</span>.<span class="hljs-constructor">All(&amp;<span class="hljs-params">users</span>)</span></code></pre><h3 id="小于"><a href="#小于" class="headerlink" title="小于"></a>小于</h3><pre><code class="hljs reasonml">c.<span class="hljs-constructor">Find(<span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;$lt&quot;</span>: 32&#125;&#125;)</span>.<span class="hljs-constructor">All(&amp;<span class="hljs-params">users</span>)</span></code></pre><h3 id="大于等于"><a href="#大于等于" class="headerlink" title="大于等于"></a>大于等于</h3><pre><code class="hljs reasonml">c.<span class="hljs-constructor">Find(<span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;$gte&quot;</span>: 33&#125;&#125;)</span>.<span class="hljs-constructor">All(&amp;<span class="hljs-params">users</span>)</span></code></pre><h3 id="小于等于"><a href="#小于等于" class="headerlink" title="小于等于"></a>小于等于</h3><pre><code class="hljs reasonml">c.<span class="hljs-constructor">Find(<span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;$lte&quot;</span>: 31&#125;&#125;)</span>.<span class="hljs-constructor">All(&amp;<span class="hljs-params">users</span>)</span></code></pre><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><pre><code class="hljs reasonml">c.<span class="hljs-constructor">Find(<span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;$in&quot;</span>: []<span class="hljs-params">string</span>&#123;<span class="hljs-string">&quot;Jimmy Kuu&quot;</span>, <span class="hljs-string">&quot;Tracy Yu&quot;</span>&#125;&#125;&#125;)</span>.<span class="hljs-constructor">All(&amp;<span class="hljs-params">users</span>)</span></code></pre><h2 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h2><h3 id="和"><a href="#和" class="headerlink" title="和"></a>和</h3><pre><code class="hljs reasonml">c.<span class="hljs-constructor">Find(<span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jimmy Kuu&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: 33&#125;)</span>.<span class="hljs-constructor">All(&amp;<span class="hljs-params">users</span>)</span></code></pre><h3 id="或"><a href="#或" class="headerlink" title="或"></a>或</h3><pre><code class="hljs reasonml">c.<span class="hljs-constructor">Find(<span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;$or&quot;</span>: []<span class="hljs-params">bson</span>.M&#123;<span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jimmy Kuu&quot;</span>&#125;, <span class="hljs-params">bson</span>.M&#123;<span class="hljs-string">&quot;age&quot;</span>: 31&#125;&#125;&#125;)</span>.<span class="hljs-constructor">All(&amp;<span class="hljs-params">users</span>)</span></code></pre><h2 id="更多查询"><a href="#更多查询" class="headerlink" title="更多查询"></a>更多查询</h2><p>请查<a href="https://github.com/mongodb/mongo-go-driver">mongodb</a>官方示例,顺便提醒一句,如果查询多次且确定语法正确情况下,请用原声mongod查询一下.</p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><pre><code class="hljs routeros">  <span class="hljs-built_in"> filter </span>:= bson.D&#123;&#123;<span class="hljs-string">&quot;State&quot;</span>, 1&#125;, &#123;<span class="hljs-string">&quot;Type&quot;</span>, ty&#125;&#125;opt := options.<span class="hljs-builtin-name">Find</span>()opt.SetLimit(size)opt.SetSkip(size * (page - 1))acs := 1opt.Sort = bson.D&#123;&#123;<span class="hljs-string">&quot;Creatime&quot;</span>, acs&#125;&#125;singleResult, err := client.Database(m.database).Collection(m.collection).<span class="hljs-builtin-name">Find</span>(context.TODO(), filter, opt)var news []model.Newserrr := singleResult.All(context.TODO(), &amp;news)<span class="hljs-keyword">if</span> errr != <span class="hljs-literal">nil</span> &#123;logging.<span class="hljs-builtin-name">Error</span>(<span class="hljs-string">&quot;查询列表解析错误&quot;</span>, err)&#125;defer singleResult.Close(context.TODO())</code></pre><h1 id="随机获取N调数据"><a href="#随机获取N调数据" class="headerlink" title="随机获取N调数据"></a>随机获取N调数据</h1><p>采用聚合数据获取随机条数,需要排重的话就多获取可能出现重复的条数</p><pre><code class="hljs roboconf">filter := mongo.Pipeline&#123;<span class="hljs-attribute">bson.D&#123;&#123;&quot;$match&quot;, bson.M&#123;&quot;Type&quot;</span>: ty&#125;&#125;&#125;,bson<span class="hljs-variable">.D</span>&#123;&#123;&quot;$sample&quot;, bson<span class="hljs-variable">.M</span>&#123;&quot;size&quot;: size&#125;&#125;&#125;,&#125;opt := options<span class="hljs-variable">.Find</span>()opt<span class="hljs-variable">.SetLimit</span>(size)singleResult, err := client<span class="hljs-variable">.Database</span>(m<span class="hljs-variable">.database</span>)<span class="hljs-variable">.Collection</span>(m<span class="hljs-variable">.collection</span>)<span class="hljs-variable">.Aggregate</span>(context<span class="hljs-variable">.TODO</span>(), filter)if err != nil &#123;logging<span class="hljs-variable">.Error</span>(&quot;查询随机新闻错误&quot;, err)&#125;var news []model<span class="hljs-variable">.News</span>erri := singleResult<span class="hljs-variable">.All</span>(context<span class="hljs-variable">.TODO</span>(), &amp;news)if erri != nil &#123;logging<span class="hljs-variable">.Error</span>(&quot;查询随机新闻解析错误&quot;, err)&#125;defer singleResult<span class="hljs-variable">.Close</span>(context<span class="hljs-variable">.TODO</span>())</code></pre><h1 id="获取上下篇"><a href="#获取上下篇" class="headerlink" title="获取上下篇"></a>获取上下篇</h1><p>拿到要获取当前数据的时间,根据这个时间获取分别获取上下篇</p><pre><code class="hljs roboconf">   upfilter := bson.D&#123;&#123;&quot;Type&quot;, ty&#125;, &#123;&quot;Creatime&quot;, bson.D&#123;&#123;&quot;$gt&quot;, tm&#125;&#125;&#125;&#125;downfilter := bson.D&#123;&#123;&quot;<span class="hljs-attribute">Type&quot;, ty&#125;, &#123;&quot;Creatime&quot;, bson.D&#123;&#123;&quot;$lt&quot;, tm&#125;&#125;&#125;&#125;</span><span class="hljs-attribute">opt</span> := options<span class="hljs-variable">.Find</span>()opt<span class="hljs-variable">.SetLimit</span>(1)//获取上一条u, ue := client<span class="hljs-variable">.Database</span>(m<span class="hljs-variable">.database</span>)<span class="hljs-variable">.Collection</span>(m<span class="hljs-variable">.collection</span>)<span class="hljs-variable">.Find</span>(context<span class="hljs-variable">.TODO</span>(), upfilter, opt)defer u<span class="hljs-variable">.Close</span>(context<span class="hljs-variable">.TODO</span>())if ue != nil &#123;logging<span class="hljs-variable">.Error</span>(&quot;获取上一条&quot;, up)&#125;var unews []model<span class="hljs-variable">.News</span>u<span class="hljs-variable">.All</span>(context<span class="hljs-variable">.TODO</span>(), &amp;unews)if unews != nil &#123;up = &amp;unews[0]&#125;optd := options<span class="hljs-variable">.Find</span>()optd<span class="hljs-variable">.SetLimit</span>(1)optd<span class="hljs-variable">.Sort</span> = bson<span class="hljs-variable">.D</span>&#123;&#123;&quot;Creatime&quot;, -1&#125;&#125;//获取下一条v, err := client<span class="hljs-variable">.Database</span>(m<span class="hljs-variable">.database</span>)<span class="hljs-variable">.Collection</span>(m<span class="hljs-variable">.collection</span>)<span class="hljs-variable">.Find</span>(context<span class="hljs-variable">.TODO</span>(), downfilter, optd)defer v<span class="hljs-variable">.Close</span>(context<span class="hljs-variable">.TODO</span>())if err != nil &#123;logging<span class="hljs-variable">.Error</span>(&quot;获取下一条错误&quot;, err)&#125;var news []model<span class="hljs-variable">.News</span>v<span class="hljs-variable">.All</span>(context<span class="hljs-variable">.TODO</span>(), &amp;news)if news != nil &#123;down = &amp;news[0]&#125;</code></pre><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><pre><code class="hljs vbscript">deleteResult, <span class="hljs-built_in">err</span> := collection.DeleteOne(context.TODO(), <span class="hljs-built_in">filter</span>)<span class="hljs-keyword">if</span> <span class="hljs-built_in">err</span> != nil &#123;fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-built_in">err</span>.<span class="hljs-keyword">Error</span>())&#125;</code></pre><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Collection)</span> <span class="hljs-title">Update</span><span class="hljs-params">(selector <span class="hljs-keyword">interface</span>&#123;&#125;, change <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span></code></pre><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p><a href="https://github.com/a624669980/wh110-demo">github demo</a>地址</p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>goland安装和破解</title>
    <link href="/posts/4df77f93.html"/>
    <url>/posts/4df77f93.html</url>
    
    <content type="html"><![CDATA[<h1 id="go开发工具"><a href="#go开发工具" class="headerlink" title="go开发工具"></a>go开发工具</h1><p>过开发工具有很多,博主是有过三个,分别是<a href="https://github.com/visualfc/liteide">LitelDE</a>,vscode,goland.<br/><br>vscode的话不只是博主安装的问题还是其他问题,代码联想异常的慢,顾放弃了.<br/><br><img src="https://i.loli.net/2020/11/09/8E1yOqJbSn6zmCr.jpg" alt="vscode"><br>litelde提好用的,还免费,博主也还是推荐使用,博主这种喜欢折腾的人不折腾难受啊,最终还是有goland.<br><br/><br><img src="https://i.loli.net/2020/11/09/PIZj7EwURxJ51yN.jpg" alt="litelde"><br>毕竟是官方推荐,个人也感觉goland更好用一点.但是Goland收费,博主也就在某宝买了一个激活码.<br><img src="https://i.loli.net/2020/11/09/Ggm6ZUHWqxDbSvA.png" alt="Goland"></p><h1 id="下载安装Goland"><a href="#下载安装Goland" class="headerlink" title="下载安装Goland"></a>下载安装Goland</h1><p>后面给的有下载地址,或者网上下载<a href="https://www.jetbrains.com/go/download/other.html">2020.1</a>这个版本<br><img src="https://i.loli.net/2020/11/09/G5L9MWdTOj8SEwX.png" alt="微信截图_20201109232556.png">,下载完一路next就行了</p><h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><ul><li><p>启动IDE，进入试用（若能直接进入项目界面，则忽略此步）<br><img src="https://i.loli.net/2020/11/09/MopjLJWiSGYqn8V.png" alt="ide"></p></li><li><p>将下载下来的ZIP包直接拖入，或者直接拖入你的项目界面也可以，不是非要拖入下图这个窗口（注意ZIP包不要解压）<br>拖入后会弹出Restart重启按钮，点击重启IDE<br><img src="https://i.loli.net/2020/11/09/TEGfNsbDB4vdRjP.png" alt="ide"><img src="https://i.loli.net/2020/11/09/aiyDOzdPCMJ8NHh.png" alt="ide"></p></li><li><p>重启后安装，激活完毕<br><img src="https://i.loli.net/2020/11/09/mN1zVFME4ZXWckp.png" alt="图片3.png"></p></li><li><p>若要查看激活过期时间<br><img src="https://i.loli.net/2020/11/09/7CiLjBcZVgXa1wF.png" alt="ide"></p></li><li><p>可以看到激活到2089年<br><img src="https://i.loli.net/2020/11/09/3nDerGNUgAmXLsZ.png" alt="ide"><br>常见问题若ZIP包拖进去没反应，建议先卸载原先的软件，清理残留，在别的文件夹里重新安装软件，云盘里提供了最新的版本下载安装一下几分钟。（2017版的不行，从2018开始的版本都支持的）</p><h1 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h1><p>百度网盘地址:<a href="https://pan.baidu.com/s/1cnEssMEe24yqTU-_cmNoJQ">链接</a><br/>提取码: e89q</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>goland</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建个人博客,免费托管到github</title>
    <link href="/posts/87ecfb0e.html"/>
    <url>/posts/87ecfb0e.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://i.loli.net/2020/10/25/Ags4c8km6Cq7pMK.jpg" alt="Hexo+github"></p><p>前一段时间看同事搭建了一个个人博客,本着学习的态度也跟着玩了玩.经过两天的时间终于搭建起来了,下面说说自己的经历.</p><p>我同事的博客托管在coding和github上(能白嫖绝不掏钱),然后他又买了一个域名,域名以解析完美.</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>win10</li><li>node ^10.15.1</li><li>npm ^6.4.1</li><li>git ^2.25.1.windows.1</li></ul><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm i -g hexo</code></p><p><img src="https://i.loli.net/2020/11/01/429eXEZ35ztsAgK.png" alt="hexo 版本"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>新建一个目录,博主是在<code>G:\hexo</code>,用cmd命令到该目录执行命令<code>hexo init myBlog</code>,hexo会初始化一个myBlog目录,并下载安装好hexo的东西.那接下来就可以运行了了.    <br/><br><code>hexo g</code> #生成<br/><br><code>hexo d</code> #启动服务<br>hexo命令如下图<br><img src="https://i.loli.net/2020/11/01/BFyRmYc8JCwUHPQ.png" alt="hexo 命令"><br>hexo运行起来的界面<br><img src="https://i.loli.net/2020/11/01/5ROotxQ8N6chZVz.jpg" alt="hexo 默认界面"><br>这一步搞定hexo基本工作已经完成,下面开始我们自定义工作.</p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>hexo的主题有很多,相对start比较多的是<a href="https://github.com/iissnan/hexo-theme-next">Next</a>,<a href="https://hexo.io/themes/">这里</a>是官方主题列表,客观可以去这里转转.<br>个人比较喜欢<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>,所以博主这里介绍的也就是fluid.<br>接下来咱们安装fluid<code>npm i hexo-theme-fluid</code><br>接下来就是各种配置了,定制出你喜欢的样子就可以了哦.<br><img src="https://i.loli.net/2020/11/01/uSbrvm9hHyWYpFT.png" alt="fluid"><br><a href="https://hexo.fluid-dev.com/">这里</a>也有fluid官方部署文档,可以少走弯路.<br><a href="https://hexo.fluid-dev.com/docs/guide/">这里</a>fluid官方配置文档.<br><a href="https://hexo.fluid-dev.com/docs/guide/">这里</a>fluid github配置文档.</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>hexo之说以强大和众多插件脱离不了关系,博主专门把插件拿出来给客官列出来.</p><h3 id="文章短链接"><a href="#文章短链接" class="headerlink" title="文章短链接"></a>文章短链接</h3><p><a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p><h3 id="看板娘"><a href="#看板娘" class="headerlink" title="看板娘"></a>看板娘</h3><p><a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a></p><h3 id="可视化编辑页面"><a href="#可视化编辑页面" class="headerlink" title="可视化编辑页面"></a>可视化编辑页面</h3><p><a href="https://github.com/fluid-dev/hexo-theme-fluid/blame/v1.8.2/_config.yml">hexo-admin</a><br>使用这个后台的时候建议多点保存,博主写了一个晚上的东西没保存成功.<br>以上是博主用到的插件,后面有在使用的会更新到这里面.</p><h1 id="github仓库"><a href="#github仓库" class="headerlink" title="github仓库"></a>github仓库</h1><p>创建一个托管html代码的仓库.<br><img src="https://i.loli.net/2020/11/01/a3Cj92ihs7BTnbK.png" alt="厂库申请说明"><br><a href="https://coding.net/">coding</a>也可以来一个</p><h1 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h1><p>申请好github还是不够的,这时候<code>hexo d</code>并不能发布代码到github上,还需要进行ssh设置.<br><img src="https://i.loli.net/2020/11/01/AO9WIbdvXijCJLN.png" alt="设置"><br><br/><br><img src="https://i.loli.net/2020/11/01/ZrvBnEXKpiyzUFT.png" alt="设置key"><br>那么问题来了,key哪来的呢.我们下面生成key,打开cmd.执行命令<br><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code>,然后一路next成功后如下图.<br><img src="https://i.loli.net/2020/11/02/bo6z4pntOT8YLcC.jpg" alt="shh"><br>然后到<code>C:\Users\用户名\.ssh</code>找到<code>id_rsa.pub</code>文件,用记事本打开复制出内容.填到上面甚至ssh里面就可以了.<br><img src="https://i.loli.net/2020/11/02/T4tUNwsSbfL6ave.png" alt="shh路径"></p><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><h2 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h2><p>很多运营商都可以申请域名,博主常用的两个平台,<a href="https://sg.godaddy.com/zh">godaddy</a>和<a href="https://www.aliyun.com/">阿里云</a>.阿里云使用更符合国人,没啥特殊要求的话就申请阿里云.</p><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>解析域名也很简单,在github的仓库设置一下域名然后再在阿里云设置一下CNAME的解析就行了.<br><img src="https://i.loli.net/2020/11/07/DBX1nQ7Le6MOJEr.png" alt="设置解析域名"><br>CNAME解析到github的域名上.<br><img src="https://i.loli.net/2020/11/07/TmKna5PYR6GXHoL.png" alt="域名解析"></p><h3 id="CNAME文件"><a href="#CNAME文件" class="headerlink" title="CNAME文件"></a>CNAME文件</h3><p>设置好域名还是不能访问,还需要在文件根目录添加一个CNAME的文件,注意:没有后缀名,内容就是域名.博主设置如下图<br><img src="https://i.loli.net/2020/11/07/yHpdiFK7B1vAWe2.png" alt="CNAME"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一篇博客写下来还是有点吃力,重点还是坚持吧,还是为了自己总结使用.博主这里返回几个碰到的问题,供大家参考.</p><ul><li>admin打开巨慢,不只是博主电脑问题还是都这样</li><li>目前国内没备案的域名不能做cdn,所以国内的打开速度还不如国外快,介意者一点的话就申请个可以备案的域名.</li><li>博主的图片使用的是<a href="https://sm.ms/">smms</a>图床,没使用站内图片,不知道会不会慢.</li><li>因为有key的限制,故只能在一台机器上进行编辑,局现象相对比较大.<br>整体就是个人维护自定义相对较高,要求门槛相对较高的一个博客工具.<br>最后重在坚持写内容,而不是搭建的过程.</li></ul>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/4a17b156.html"/>
    <url>/posts/4a17b156.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
